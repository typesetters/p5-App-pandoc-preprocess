#!/usr/bin/env perl

package main;

#  PODNAME: ppp
# ABSTRACT: Preprocess Pandoc before Processing Pandoc

use v5.14;
use strict;
use warnings;
use File::Spec;
use File::Temp 'tempdir';
use File::Path 'make_path';

# configuration set as --key value at command line or as key=value from file
our %config;
our ($tmp, $log);

# load configuration from file in current directory if given
{
    if (local @ARGV = grep { -e $_ } qw(.ppprc ppp.conf)) {
        while (<>) { # parse simple "key = value" pairs
            $config{$1} = $2 if /^\s*(\w+)\s*=\s*(.*?)\s*$/;
        }
    }
}

# parse command line options
while (@ARGV) {
    last unless $ARGV[0] =~ /^--(\w*)$/; # --key
    last unless length($1);              # "--" stops option parsing
    shift @ARGV;
    $config{$1} = (@ARGV && $ARGV[0] !~ /^--(\w*)$/)
                ? shift @ARGV : 1;       # --key  or --key value
}

# register known options as global variables
{
    no strict 'refs';
    for my $name (qw(tmp log)) {
        $$name = $config{$name} if defined $config{$name};
    }
}

create_directories($tmp, $log);

state $verbose = 1;
state $fileno = 0;
state $outfile;
state $format;
state @children;
state %attributes;
state $img_dir = 'tmp'; # where to put created images
state $log_dir = 'tmp'; # where to put logfiles

MAIN: {
  mkdir $img_dir unless -d $img_dir;
  mkdir $log_dir unless -d $log_dir;
  while(<>) {
    if ( (my $start = /^~{3,}\s*\{.*?(?<format>rdfdot|ditaa|dot|neato|yuml|plantuml)(?<attributes>.*)\}.*/) ... (my $end = /^~{3,}\s*$/) ) {
        $start ? begin_ppp() : $end ? end_ppp() : print {$outfile} $_
    } else {
      print
    }
  }
}

SUBS: {
  sub begin_ppp {
    $fileno++;
    $format = $+{format};
    $attributes{$fileno.$format} = $+{attributes};
    open $outfile, '>', "$img_dir/image-$fileno.$format"
  }

  # path and filename of the current image with selected extension
  sub image {
    $img_dir."/image-$fileno.$_[0]";
  }

  # call 'system' with sprintf and STDOUT/STDERR to logfile
  sub ssystemf {
    my ($s, @a) = @_;
    my $cmd  = sprintf $s, @a;
    my $name = substr($cmd,0,index($cmd,' '));
    die "$name not available!\n" unless `which $name`;
    print STDERR "$cmd\n" if $verbose;
    system("$cmd 2>&1 >> $log_dir/$name.log");
  }

  # scale/resize an image given by filename according to attributes 'dpi' and 'scale'
  sub scale_image {
    my ($attrs, $image) = @_;

    if ($attrs->{dpi}) {
        my $dpi_x = $attrs->{dpi} =~ /^(\d+)x(\d+)$/ ? $1 : $attrs->{dpi};
        my $dpi_y = $attrs->{dpi} =~ /^(\d+)x(\d+)$/ ? $2 : $attrs->{dpi};
        ssystemf("convert -units PixelsPerInch -density %.0fx%.0f %s %s %s",
            $dpi_x, $dpi_y, $image, $image, $img_dir/$image);
    }

    if ($attrs->{scale}) {
        ssystemf("mogrify -scale %s %s", $attrs->{scale}, $image);
    }
  }

  sub render {
    my ($format, $fileno, %attrs) = @_;
    my $cmd = '';

    $format =~ /^ditaa$/ and
      $cmd = "ditaa"
           . " @{[exists $attrs{'rounded-corners'} ? '--round-corners ' : ' ']}"
           . " @{[exists $attrs{'no-shadows'}      ? '--no-shadows '    : ' ']}"
           . " @{[exists $attrs{'no-separation'}   ? '--no-separation ' : ' ']}"
           . " @{[exists $attrs{'no-antialias'}    ? '--no-antialias '  : ' ']}"
           . " $tmpdir/image-$fileno.$format $tmpdir/image-$fileno.png"
           . " 2>&1 >>$logdir/ditaa.log";

    $format =~ /^rdfdot$/ and
      $cmd = "rdfdot"
           . " -ttl"
           . " $tmpdir/image-$fileno.$format $tmpdir/image-$fileno.svg"
           . " 2>&1 >>$logdir/rdfdot.log";

    $format =~ /^dot$/ and
      $cmd = "dot"
           . " -Tsvg"
           . " -o $tmpdir/image-$fileno.svg $tmpdir/image-$fileno.$format"
           . " 2>&1 >>$logdir/dot.log";

    $format =~ /^neato$/ and
      $cmd = "neato"
           . " -Tsvg "
           . " -o $tmpdir/image-$fileno.svg $tmpdir/image-$fileno.$format "
           . " 2>&1 >>$logdir/neato.log";

    $format =~ /^yuml$/ and
      $cmd = "yuml "
           . " --format svg"
           . " --type  @{[exists $attrs{type}      ? $attrs{type}     : 'class']}"
           . " --style @{[exists $attrs{style}     ? $attrs{style}    : 'nofunky']}"
           . " --dir   @{[exists $attrs{direction} ? $attrs{direction}: 'LR']}"
           . " --in $tmpdir/image-$fileno.$format --out $tmpdir/image-$fileno.svg"
           . " 2>&1 >>$logdir/yuml.log";

    $format =~ /^plantuml$/ and
      $cmd = "plantuml"
           . " -tsvg "
           . " -charset UTF-8"
           . " $tmpdir/image-$fileno.$format"
           . " 2>&1 >>$logdir/plantuml.log";

    ### $cmd
    system($cmd);

  }
  sub scale {
    my ($format, $fileno, %attrs) = @_;
    my $cmd = '';

    # TODO: These two formats should get svg support
    if ($format =~ /^(ditaa)$/) {
      $cmd = "mogrify"
           . " -scale @{[exists $attrs{scale} ? $attrs{scale} : '100%']}"
           . " $tmpdir/image-$fileno.png"
           . " 2>&1 >>$logdir/mogrify.log";
    } else {
      my $scale = exists $attrs{scale} ? do { $_ = $attrs{scale}; s/%//; $_/100 }: 1.0;
      $cmd = "rsvg-convert"
           . " --zoom $scale"
           . " --format png"
           . " --output $tmpdir/image-$fileno.png"
           . " $tmpdir/image-$fileno.svg"
           . " 2>&1 >>$logdir/plantuml.log";
    };
    ### $cmd
    system($cmd);
  }

  sub end_ppp {
    close $outfile;

    my %attrs = map { /(.+?)=(["']?.+["']?)/ ? ($1 => $2) : ($_ => 1) } split /\s+\./, $attributes{$fileno.$format};
    if( my $child = fork == 0 ) {
       push @children, $child;
       $format =~ /^ditaa$/ and do {
         my $cmd =
          "ditaa " .
          (exists $attrs{"rounded-corners"} ? '--round-corners ' : ' ') .
          (exists $attrs{"no-shadows"}      ? '--no-shadows '    : ' ') .
          (exists $attrs{"no-separation"}   ? '--no-separation ' : ' ') .
          (exists $attrs{"no-antialias"}    ? '--no-antialias '  : ' ') .
          " ".image($format)." ".image("png");
         ssystemf($cmd);
         scale_image(\%attrs, image("png"));
       };
       $format =~ /^rdfdot$/ and do {
         ssystemf("rdfdot -ttl %s %s", image($format), image("png"));
         scale_image(\%attrs, image("png"));
       };
       $format =~ /^dot$/ and do {
         my $dpi = $attrs{dpi} || '';
         if ($dpi) {
           $dpi =~ s/x.*//;
           $dpi = "-Gdpi=$dpi";
         }  
         ssystemf("dot -Tpng %s -o %s %s", $dpi, image("png"), image($format));
         scale_image(\%attrs, image("png"));
       };
       $format =~ /^neato$/ and do {
         ssystemf("neato -Tpng -o %s %s", image("png"), image($format));
         scale_image(\%attrs, image("png"));
       };
       $format =~ /^yuml$/ and do {
         my $cmd =
           "yuml " .
           (exists $attrs{"type"}       ? "--type  @{[$attrs{type}      ]} ": '--type=class ') .
           (exists $attrs{"style"}      ? "--style @{[$attrs{style}     ]} ": '--style=boring ') .
           (exists $attrs{"direction"}  ? "--dir   @{[$attrs{direction} ]} ": '--dir=LR ') .
           " --in ".image($format)." --out ".image("png")
         ;
         ssystemf($cmd);
         scale_image(\%attrs, image("png"));
       };
       $format =~ /^plantuml$/ and do {
         ssystemf("plantuml -tpng -charset UTF-8 ".image($format));
         scale_image(\%attrs, image("png"));
       };
       exit 0;
    }

    # TODO: don't insert image if system call failed
    $format =
      "![" . (exists $attrs{title} ? $attrs{title} : '' )
           . (exists $attrs{label} ? "\\label{$attrs{label}}" : '' ).
      "]"  .
      "(".image("png").")" .
      (exists $attrs{inline} ? '\\ ' : '')
    ;
    say STDOUT $format;
    $format = '';
  }

  sub create_directories {
    for (@_) {
      if (defined $_) {
        unless (-d $_) {
          make_path $_ or die "Failed to create path: $_";
        }
      }
    }
  }
}

END {
  while (1) {
    my $child = waitpid(-1, 0);
    last if $child == -1;       # No more outstanding children
  }
}
