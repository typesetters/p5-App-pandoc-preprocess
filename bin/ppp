#!/usr/bin/env perl

package main;

#  PODNAME: ppp
# ABSTRACT: Preprocess Pandoc before Processing Pandoc

use v5.14;
use strict;
use warnings;

use FindBin;

use lib "$FindBin::Bin/../lib";

use Data::Printer;
# use Smart::Comments;

state $fileno = 0;
state $outfile;
state $format;
state @children;
state %attributes;

BEGIN { die "No directory tmp/ available! Please create it" unless -d 'tmp/' }

my $img_dir = "tmp/";
my $log_dir = "tmp/";

MAIN: {
  while(<>) {
    if ( (my $start = /^~{3,}\s*\{.*?(?<format>rdfdot|ditaa|dot|neato|yuml|plantuml)(?<attributes>.*)\}.*/) ... (my $end = /^~{3,}\s*$/) ) {
        $start ? begin_ppp() : $end ? end_ppp() : print {$outfile} $_
    } else {
      print
    }
  }
}

SUBS: {
  sub begin_ppp {
    $fileno++;
    $format = $+{format};
    $attributes{$fileno.$format} = $+{attributes};
    open $outfile, '>', "tmp/image-$fileno.$format"
  }

  sub scale_image {
    my ($attrs, $image) = @_;

    if ($attrs->{dpi}) {
        my $dpi_x = $attrs->{dpi} =~ /^(\d+)x(\d+)$/ ? $1 : $attrs->{dpi};
        my $dpi_y = $attrs->{dpi} =~ /^(\d+)x(\d+)$/ ? $2 : $attrs->{dpi};
        my $cmd = "convert -units PixelsPerInch -density "
                . sprintf("%.0fx%.0f ", $dpi_x, $dpi_y)
                . "$img_dir/$image $img_dir/$image 2>&1 >> $log_dir/convert.log";
        system($cmd);
    }

    if ($attrs->{scale}) {
        my $cmd = "mogrify -scale ".$attrs->{scale}
                . " $img_dir/$image 2>&1 >> $log_dir/mogrify.log";
        system($cmd);
    }
  }

  sub end_ppp {
    close $outfile;

    my %attrs = map { /(.+?)=(["']?.+["']?)/ ? ($1 => $2) : ($_ => 1) } split /\s+\./, $attributes{$fileno.$format};
    if( my $child = fork == 0 ) {
       push @children, $child;
       $format =~ /^ditaa$/ and do {
         my $cmd =
          "ditaa " .
          (exists $attrs{"rounded-corners"} ? '--round-corners ' : ' ') .
          (exists $attrs{"no-shadows"}      ? '--no-shadows '    : ' ') .
          (exists $attrs{"no-separation"}   ? '--no-separation ' : ' ') .
          (exists $attrs{"no-antialias"}    ? '--no-antialias '  : ' ') .
          " tmp/image-$fileno.$format tmp/image-$fileno.png 2>&1 >>tmp/ditaa.log"
         ;
         system($cmd);
         scale_image(\%attrs, "image-$fileno.png");
       };
       $format =~ /^rdfdot$/ and do {
         system("rdfdot -ttl tmp/image-$fileno.$format tmp/image-$fileno.png 2>&1 >>tmp/rdfdot.log");
         scale_image(\%attrs, "image-$fileno.png");
       };
       $format =~ /^dot$/ and do {
         my $dpi = $attrs{dpi} || '';
         if ($dpi) {
           $dpi =~ s/x.*//;
           $dpi = "-Gdpi=$dpi";
         }  
         my $cmd = "dot -Tpng $dpi -o tmp/image-$fileno.png tmp/image-$fileno.$format 2>&1 >>tmp/dot.log";
         system($cmd);
         scale_image(\%attrs, "image-$fileno.png");
       };
       $format =~ /^neato$/ and do {
         system("neato -Tpng -o tmp/image-$fileno.png tmp/image-$fileno.$format 2>&1 >>tmp/neato.log");
         scale_image(\%attrs, "image-$fileno.png");
       };
       $format =~ /^yuml$/ and do {
         my $cmd =
           "yuml " .
           (exists $attrs{"type"}       ? "--type  @{[$attrs{type}      ]} ": '--type=class ') .
           (exists $attrs{"style"}      ? "--style @{[$attrs{style}     ]} ": '--style=boring ') .
           (exists $attrs{"direction"}  ? "--dir   @{[$attrs{direction} ]} ": '--dir=LR ') .
           " --in tmp/image-$fileno.$format --out tmp/image-$fileno.png 2>&1 >>tmp/yuml.log"
         ;
         system($cmd);
         scale_image(\%attrs, "image-$fileno.png");
       };
       $format =~ /^plantuml$/ and do {
         system("plantuml -tpng -charset UTF-8 tmp/image-$fileno.$format 2>&1 >>tmp/plantuml.log");
         scale_image(\%attrs, "image-$fileno.png");
       };
       exit 0;
    }

    $format =
      "![" . (exists $attrs{title} ? $attrs{title} : '' )
           . (exists $attrs{label} ? "\\label{$attrs{label}}" : '' ).
      "]"  .
      "(tmp/image-$fileno.png)" .
      (exists $attrs{inline} ? '\\ ' : '')
    ;
    say STDOUT $format;
    $format = '';
  }
}

END {
  while (1) {
    my $child = waitpid(-1, 0);
    last if $child == -1;       # No more outstanding children
  }
}
